#!/usr/bin/env perl
use warnings;
use strict;
use v5.10.0;
use utf8;

#------------------------------------------------------------------------------
use File::Basename qw(basename);
our $PROGNAME = basename($0);

#------------------------------------------------------------------------------
use open IO => qw(:locale);
use Encode::Locale;
use Encode qw(decode);
BEGIN {
    @ARGV = map { decode('locale', $_, Encode::FB_CROAK) } @ARGV;
}

#------------------------------------------------------------------------------
select(STDOUT); $| = 1;
select(STDERR); $| = 1;
select(STDOUT);

#------------------------------------------------------------------------------
my $g2 = My::Git::Graph2::Style1->new();

#------------------------------------------------------------------------------
our $ascii;
our $showParents;
our $stdin;
our $verbosity = 0;
our $dryRun;
our $wrapColumns;

#------------------------------------------------------------------------------
use Getopt::Long;
Getopt::Long::Configure('bundling', 'gnu_compat', 'no_ignore_case');
Getopt::Long::GetOptions(
    'ascii'                => \$ascii,
    'parents|show-parents' => \$showParents,
    'stdin'                => \$stdin,
    'wrap:i'               => sub { $wrapColumns = defined $_[1] ? $_[1] : 0; },

    'A=s'                  => sub { $g2->revList->{A} = { spec => $_[1] }; },
    'B=s'                  => sub { $g2->revList->{B} = { spec => $_[1] }; },
    'C=s'                  => sub { $g2->revList->{C} = { spec => $_[1] }; },
    'D=s'                  => sub { $g2->revList->{D} = { spec => $_[1] }; },

    # git log options
    'abbrev:i'             => sub { $g2->getoptLongOption('--abbrev', 'optional', @_); },
    'abbrev-commit'        => sub { $g2->getoptLongOption('--abbrev-commit'); },
    'no-abbrev-commit'     => sub { $g2->getoptLongOption('--no-abbrev-commit'); },
    'all'                  => sub { $g2->getoptLongOption('--all'); },
    'author-date-order'    => sub { $g2->getoptLongOption('--author-date-order'); },
    'color:s'              => sub { $g2->getoptLongOption('--color', 'optional', @_); },
    'date-order'           => sub { $g2->getoptLongOption('--date-order'); },
    'decorate:s'           => sub { $g2->getoptLongOption('--decorate', 'optional', @_); },
    'exclude=s'            => sub { $g2->getoptLongOption('--exclude', 'required', @_); },
    'graph'                => sub { }, # has no effect
    'name-status'          => sub { $g2->getoptLongOption('--name-status'); },
    'oneline|one-line'     => sub { $g2->getoptLongOption('--oneline'); },
    'pretty:s'             => sub { $g2->getoptLongOption('--pretty', 'optional', @_); },
    'topo-order'           => sub { $g2->getoptLongOption('--topo-order'); },
    'date=s'               => sub { $g2->getoptLongOption('--date', 'required', @_); },

    'adog' => sub {
        push(
            @{$g2->gitLogOptions},
            '--all',
            '--oneline',
            '--decorate',
        );
    },

    'v|verbose+'           => \$verbosity,
    'h|help'               => sub { usage(); exit(0); },
    'n|dry-run'            => \$dryRun,
) or die("Type '$PROGNAME --help' for help.  Type 'perldoc $PROGNAME' for a manual page.\n");

sub usage { print(<<"END"); }
usage:
    git graph2 [<option> ...] [<revision range>] [[--] <path> ...]
    git graph2 --stdin [<option> ...] [<filename> ...]
options:
        --ascii
    -n, --dry-run
    -h, --help
        --show-parents
        --abbrev
        --stdin
    -v, --verbose
        --wrap[=<num>]
options passed to git log:
        --abbrev[=<n>]
        --abbrev-commit
        --no-abbrev-commit
        --adog
        --all
        --author-date-order
        --color[=<when>]
        --date-order
        --decorate[=short|full|auto|no]
        --exclude=<glob-pattern>
        --graph (has no effect)
        --name-status
        --oneline
        --pretty[=<format>]
        --topo-order
        --date=<format>
Type 'perldoc $PROGNAME' for a manual page.
END

# --pretty=format:'%h|%p|%ai|%d|%s'

###############################################################################

$g2->verbosity($verbosity);
$g2->ascii($ascii);
$g2->showParents($showParents);
$g2->stdin($stdin);
$g2->wrapColumns($wrapColumns) if defined $wrapColumns;

if ($g2->verbosity || $g2->dryRun) {
    say(scalar($g2->getGitCommand(@ARGV)));
}

if ($g2->dryRun) {
    exit(0);
}

$g2->run(@ARGV);

###############################################################################

package My::Git::Graph2 {
    use Sort::Naturally qw(nsort);
    use String::ShellQuote qw(shell_quote);
    use Text::Tabs qw(expand);
    use Data::Dumper qw(Dumper);
    use Storable qw(dclone);
    use Text::Wrap qw();
    use List::Util qw(max);
    use Moo;

    INIT {
        # state
        has commitLog              => (is => 'rw', default => sub { return []; });
        has commit                 => (is => 'rw');
        has parents                => (is => 'rw', default => sub { return []; });
        has columns                => (is => 'rw', default => sub { return []; });
        has commitColumnNumber     => (is => 'rw');
        has nextColumnNumber       => (is => 'rw', default => 0);
        has columnNumbers          => (is => 'rw', default => sub { return {}; });

        has gitLogOptions          => (is => 'rw', default => sub { return []; });

        # options
        has ascii                  => (is => 'rw', default => 0);
        has showParents            => (is => 'rw', default => 0);
        has padding                => (is => 'rw', default => 32);
        has stdin                  => (is => 'rw', default => 0);
        has breathingRoom          => (is => 'rw', default => 0);
        has verbosity              => (is => 'rw', default => 0);
        has dryRun                 => (is => 'rw', default => 0);
        has wrapColumns            => (is => 'rw');
        has revList                => (is => 'rw', default => sub { return {}; });

        has commits       => (is => 'rw', default => sub { return []; }); # [ commit, ... ]
        has commitParents => (is => 'rw', default => sub { return {}; }); # { commit => [ parent, ... ] }
        has commitLogs    => (is => 'rw', default => sub { return {}; }); # { commit => [ line, ... ] }
    }

    sub run {
        my ($self, @args) = @_;
        $self->collectRevLists();
        $self->printRevListLegends();
        if ($self->stdin) {
            $self->runStdin(@args);
        } else {
            $self->runGit(@args);
        }
    }

    sub collectRevLists {
        my ($self) = shift;
        foreach my $revListName (keys %{$self->revList}) {
            my $spec = $self->revList->{$revListName}->{spec};
            my $ph;
            if (!open($ph, '-|', 'git', 'rev-list', $spec)) {
                next revList;
            }
            my @revList;
            while (<$ph>) {
                s{\R\z}{};
                s{^\s*}{};
                s{\s*$}{};
                if ($_ =~ m{^[[:xdigit:]]+$}) {
                    push(@revList, $_);
                }
            }
            $self->revList->{$revListName}->{revList} = [@revList];
        }
    }

    sub printRevListLegends {
        my ($self) = @_;
        my $hasSomething = 0;
        foreach my $revListName (nsort keys %{$self->revList}) {
            my $spec = $self->revList->{$revListName}->{spec};
            my $count = scalar @{$self->revList->{$revListName}->{revList}};
            my $parenthetical = '';
            if ($spec =~ m{^(.*)\.\.\.(.*)$}) {
                my ($r1, $r2) = ($1, $2);
                $parenthetical = sprintf(" (commits in %s or %s but not both)", $r2, $r1);
            } elsif ($spec =~ m{^(.*)\.\.(.*)$}) {
                my ($r1, $r2) = ($1, $2);
                $parenthetical = sprintf(" (commits in %s but not in %s)", $r2, $r1);
            }

            printf("%-4s = %-32s   %4d revisions%s\n", $revListName, $spec, $count, $parenthetical);

            $hasSomething = 1;
        }
        if ($hasSomething) {
            print("\n");
        }
    }

    sub revListHas {
        my ($self, $revListName, $commit) = @_;
        my $revList = $self->revList->{$revListName};
        if (!$revList) {
            return;
        }
        foreach my $rev (@{$revList->{revList}}) {
            if (substr($rev, 0, length($commit)) eq $commit) {
                return 1;
            }
            if (substr($commit, 0, length($rev)) eq $rev) {
                return 1;
            }
        }
        return;
    }

    sub whichRevListHas {
        my ($self, $commit) = @_;
        foreach my $revListName (nsort keys %{$self->revList}) {
            if ($self->revListHas($revListName, $commit)) {
                return $revListName;
            }
        }
        return;
    }

    sub getoptLongOption {
        my ($self, $option, $type, @getoptLongArgs) = @_;
        my ($optionName, $value, $key) = @getoptLongArgs;

        $type //= 'none';

        if (defined $value) {
            if ($type eq 'required') {
                push(@{$self->gitLogOptions}, $option . '=' . $value);
            } else {
                if ($value eq '') {
                    push(@{$self->gitLogOptions}, $option);
                } else {
                    push(@{$self->gitLogOptions}, $option . '=' . $value);
                }
            }
        } else {
            if ($type eq 'required') {
                push(@{$self->gitLogOptions}, $option . '=');
            } else {
                push(@{$self->gitLogOptions}, $option);
            }
        }
    }

    sub runStdin {
        my ($self, @args) = @_;
        $self->initialize();
        $self->runFileHandle(\*ARGV);
    }

    sub runGit {
        my ($self, @args) = @_;
        $self->initialize();
        my $ph;
        if (!open($ph, '-|', 'git', 'log', '--parents',
                  @{$self->gitLogOptions},
                  @args)) {
            warn("failed to open pipe to git: $!\n");
            return;
        }
        $self->runFileHandle($ph);
    }

    sub runFileHandle {
        my ($self, $fh) = @_;
        local $_ = undef; # $ARG (the default input and pattern-matching space)
        local $/ = "\n";  # $INPUT_RECORD_SEPARATOR
        my @commit;
        while (<$fh>) {
            $self->parseLine($_);
        }
        $self->eof();
    }

    sub initialize {
        my ($self) = @_;
    }

    sub parseLine {
        my ($self, $line) = @_;
        $line =~ s{\R\z}{};
        my $origLine = $line;

        $line =~ s{\e\[[0-9;]*m}{}g;

        my $commit;

        if ($line =~ s{^\s*([[:xdigit:]]{8,})\s*}{}) {
            $commit = $1;
        } elsif ($line =~ s{^\s*commit\s+([[:xdigit:]]{8,})\s*}{}) {
            $commit = $1;
        } else {
            push(@{$self->commitLog}, $origLine);
            return;
        }

        my @parents;
        while ($line =~ s{^\s*([[:xdigit:]]{8,})\s*}{}) {
            my $parent = $1;
            push(@parents, $parent);
        }

        my $commitLine = $origLine;

        if (!$self->showParents) {
            foreach my $parent (@parents) {
                $commitLine =~ s{\s+$parent\b}{};
            }
        }

        $self->startNextCommit($commitLine, $commit, @parents);
    }

    sub eof {
        my ($self) = @_;
        if (defined $self->commit) {
            $self->printCommit();
        }
    }

    sub startNextCommit {
        my ($self, $line, $commit, @parents) = @_;

        if (defined $self->commit) {
            $self->printCommit();
        }

        $self->commitLog([$line]);
        $self->commit($commit);
        $self->parents(\@parents);
    }

    sub getNextColumnNumber {
        my ($self) = @_;
        my $result = $self->nextColumnNumber;
        $self->nextColumnNumber($self->nextColumnNumber + 1);
        return $result;
    }

    sub swapColumnNumbers {
        my ($self, $a, $b) = @_;
        foreach my $commit (keys %{$self->columnNumbers}) {
            if ($self->columnNumbers->{$commit} == $a) {
                $self->columnNumbers->{$commit} = $b;
            } elsif ($self->columnNumbers->{$commit} == $b) {
                $self->columnNumbers->{$commit} = $a;
            }
        }
        ($self->columns->[$a], $self->columns->[$b]) = ($self->columns->[$b], $self->columns->[$a]);
    }

    sub computeColumnNumbers {
        my ($self) = @_;
        my $commit = $self->commit;
        my ($parent, @otherParents) = @{$self->parents};

        $self->columnNumbers->{$commit} //= $self->getNextColumnNumber();
        $self->commitColumnNumber($self->columnNumbers->{$commit});
        if (defined $parent) {
            if (!defined $self->columnNumbers->{$parent}) {
                $self->columnNumbers->{$parent} = $self->columnNumbers->{$commit};
            }
        }
        foreach my $otherParent (@otherParents) {
            $self->columnNumbers->{$otherParent} //= $self->getNextColumnNumber();
        }
    }

    sub computeColumns {
        my ($self) = @_;
        my $commit = $self->commit;
        my ($parent, @otherParents) = @{$self->parents};

        $self->computeColumnNumbers();

        my $cn = $self->columnNumbers->{$commit};
        $self->columns->[$cn] //= { };
        $self->columns->[$cn]->{status} = defined $parent ? 'active' : 'done';

        if (defined $parent) {
            my $cn = $self->columnNumbers->{$parent};
            $self->columns->[$cn] //= { status => 'new' };
        }

        foreach my $otherParent (@otherParents) {
            my $cn = $self->columnNumbers->{$otherParent};
            $self->columns->[$cn] //= { status => 'new' };
        }
    }

    sub cleanupClosedColumns {
        my ($self) = @_;
        for (my $i = 0; $i < scalar @{$self->columns}; $i += 1) {
            my $column = $self->columns->[$i];
            if (defined $column) {
                if ($column->{status} eq 'closing') {
                    $self->columns->[$i] = undef;
                }
            }
        }
    }

    sub closeDoneColumns {
        my ($self) = @_;
        for (my $i = 0; $i < scalar @{$self->columns}; $i += 1) {
            my $column = $self->columns->[$i];
            if (defined $column) {
                if ($column->{status} eq 'done') {
                    if ($self->breathingRoom) {
                        $self->columns->[$i]->{status} = 'closing';
                    } else {
                        $self->columns->[$i] = undef;
                    }
                } elsif ($i == $self->commitColumnNumber) {
                    my $continues = 0;
                    foreach my $parent (@{$self->parents}) {
                        if ($self->columnNumbers->{$parent} == $i) {
                            $continues = 1;
                            last;
                        }
                    }
                    if (!$continues) {
                        if ($self->breathingRoom) {
                            $self->columns->[$i]->{status} = 'closing';
                        } else {
                            $self->columns->[$i] = undef;
                        }
                    }
                }
            }
        }
    }

    sub activateNewColumns {
        my ($self) = @_;
        for (my $i = 0; $i < scalar @{$self->columns}; $i += 1) {
            my $column = $self->columns->[$i];
            if (defined $column && $column->{status} eq 'new') {
                $column->{status} = 'active';
            }
        }
    }

    sub cleanupTrailingColumns {
        my ($self) = @_;
        while (scalar @{$self->columns} && !defined $self->columns->[-1]) {
            pop(@{$self->columns});
            $self->nextColumnNumber($self->nextColumnNumber - 1);
        }
    }

    sub cleanupColumns {
        my ($self) = @_;
        $self->cleanupClosedColumns();
        $self->closeDoneColumns();
        $self->activateNewColumns();
        $self->cleanupTrailingColumns();
    }

    sub computeOtherActiveColumnNumbers {
        my ($self) = @_;
        my @result = ();
        for (my $i = 0; $i < scalar @{$self->columns}; $i += 1) {
            my $column = $self->columns->[$i];
            if ($i != $self->commitColumnNumber && defined $column && $column->{status} eq 'active') {
                push(@result, $i);
            }
        }
        return @result;
    }

    sub computeParentColumnNumbers {
        my ($self) = @_;
        return grep { defined $_ } map { $self->columnNumbers->{$_} } @{$self->parents};
    }

    sub computeGraphLines {
        my ($self) = @_;
        return (
            $self->computeGraphLine,
            $self->computeAdditionalGraphLines,
        );
    }

    sub finalizeWrapColumns {
        my ($self) = @_;
        if (defined $self->wrapColumns && !$self->wrapColumns) {
            # i.e., zero, as is the case when --wrap is specified without a number
            if (!-t 1) {
                die("${PROGNAME}: not a tty: must specify number of columns for --wrap\n");
                exit(1);
            }
            my $wrapColumns = `tput cols`;
            if ($wrapColumns !~ m{(\d+)}) {
                die("${PROGNAME}: could not get number of columns from terminal; must specify for --wrap\n");
                exit(1);
            }
            $wrapColumns = $1;
            if ($wrapColumns < 32) {
                die("${PROGNAME}: must have at least 32 columns for --wrap\n");
                exit(1);
            }
            $self->wrapColumns($wrapColumns);
        }
    }

    sub printCommit {
        my ($self) = @_;

        $self->finalizeWrapColumns();
        $self->computeColumns();

        my @graphLines = $self->computeGraphLines();

        my $totalColumns;

        my $graphLineLength = max map { length $_ } @graphLines;

        my @log = @{$self->commitLog};
        if ($self->wrapColumns) {
            my $logColumns = $self->wrapColumns - $graphLineLength;
            if ($logColumns >= 32) {
                local $Text::Wrap::columns = $logColumns;
                my @newLog;
                foreach my $log (@log) {
                    if ($log !~ m{\S}) {
                        push(@newLog, $log);
                        continue;
                    }
                    my $logWrapped = Text::Wrap::wrap("", "    ", $log);
                    my @logWrapped = split(m{\r?\n}, $logWrapped);
                    push(@newLog, @logWrapped);
                }
                @log = @newLog;
            }
        }

        foreach my $log (@log) {
            my $graphLine = shift(@graphLines);
            $graphLine //= $self->computeExtendedGraphLine();
            print($graphLine . $log . "\n");
        }

        foreach my $graphLine (@graphLines) {
            print($graphLine . "\n");
        }

        $self->cleanupColumns();
    }

    sub getGitCommand {
        my ($self, @args) = @_;
        my @cmd = (
            'git', 'log', '--parents',
            @{$self->gitLogOptions},
            @args
        );
        if (wantarray) {
            return @cmd;
        }
        return shell_quote(@cmd);
    }
};

package My::Git::Graph2::Style1 {
    use Moo;
    INIT {
        extends 'My::Git::Graph2';
    }
    sub computeGraphLine {
        my ($self) = @_;
        my $result = ' ' x (3 * scalar @{$self->columns});

        my $char = $self->whichRevListHas($self->commit) // '*';

        substr($result, $self->commitColumnNumber * 3, 1) = $char;
        foreach my $i ($self->computeOtherActiveColumnNumbers) {
            substr($result, $i * 3, 1) = '|';
        }
        $result = sprintf('%-*s', $self->padding, $result);
        # any post-processing goes here
        return $result;
    }
    sub computeAdditionalGraphLines {
        my ($self) = @_;
        my $line1 = ' ' x (3 * scalar @{$self->columns});
        my $line2 = ' ' x (3 * scalar @{$self->columns});
        foreach my $i ($self->computeOtherActiveColumnNumbers) {
            substr($line1, $i * 3, 1) = '|';
            substr($line2, $i * 3, 1) = '|';
        }
        foreach my $i ($self->computeParentColumnNumbers) {
            if ($i == $self->commitColumnNumber) {
                substr($line1, $i * 3, 1) = '|';
                substr($line2, $i * 3, 1) = '|';
            } elsif ($i < $self->commitColumnNumber) {
                substr($line1, $self->commitColumnNumber * 3 - 1, 1) = '/';
                for (my $j = $i * 3 + 2; $j <= $self->commitColumnNumber * 3 - 2; $j += 1) {
                    if (substr($line1, $j, 1) eq '|') {
                        substr($line1, $j, 1) = '|'; # ideally | combined with _
                    } else {
                        substr($line1, $j, 1) = '_';
                    }
                }
                substr($line2, $i * 3 + 1, 1) = '/';
            } elsif ($i > $self->commitColumnNumber) {
                substr($line1, $self->commitColumnNumber * 3 + 1, 1) = '\\';
                for (my $j = $self->commitColumnNumber * 3 + 2; $j <= $i * 3 - 2; $j += 1) {
                    if (substr($line1, $j, 1) eq '|') {
                        substr($line1, $j, 1) = '|'; # ideally | combined with _
                    } else {
                        substr($line1, $j, 1) = '_';
                    }
                }
                substr($line2, $i * 3 - 1, 1) = '\\';
            }
        }
        if (grep { $_ ne $self->commitColumnNumber } $self->computeParentColumnNumbers()) {
            $line1 = sprintf('%-*s', $self->padding, $line1);
            $line2 = sprintf('%-*s', $self->padding, $line2);
            # any post-processing goes here
            return ($line1, $line2);
        }
        return;
    }
    sub computeExtendedGraphLine {
        my ($self) = @_;
        my $result = ' ' x (3 * scalar @{$self->columns});
        foreach my $i ($self->computeOtherActiveColumnNumbers) {
            substr($result, $i * 3, 1) = '|';
        }
        foreach my $i ($self->computeParentColumnNumbers) {
            substr($result, $i * 3, 1) = '|';
        }
        $result = sprintf('%-*s', $self->padding, $result);
        # any post-processing goes here
        return $result;
    }
};

=head1 NAME

git graph2 --- a "git log --graph" alternative without diagonals.

=head1 SYNOPSIS

To run "git log" and display a graph in one step:

    git graph2 [--ascii]
               [--parents|--show-parents]
               [--abbrev[=<n>]]
               [--abbrev-commit]
               [--no-abbrev-commit]
               [--all]
               [--author-date-order]
               [--date-order]
               [--decorate[=<short|full|auto|no>]]
               [--name-status]
               [--oneline|--one-line]
               [--pretty[=<format>]]
               [--topo-order]
               [--color[=<when>]]
               [--exclude[=<exclude>]]
               [--graph]
               [--adog]
               [--verbose]
               [--dry-run]
               [<revision range>] [[--] <path> ...]

To read "git log" output from another source (must be from running
"git log --parents"):

    git log --parents ...  | git graph2 --stdin [<option> ...]
    cat git-log-output.txt | git graph2 --stdin [<option> ...]
                             git graph2 --stdin [<option> ...] [<filename> ...]

To get help:

    git graph2 --help
    perldoc git-graph2

=head1 DESCRIPTION

"git graph2" takes the output of "git log --parents" and generates a
different style of graph than that generated by "git log --graph",
notably without all those diagonals.

=head1 OPTIONS

=over 4

=item --abbrev[=<n>]

Show partial prefixes of commitids.  Same as in git-log(1), which see.

=item --abbrev-commit

Show partial prefixes of commitids.  Same as in git-log(1), which see.

=item --no-abbrev-commit

Show full 40-byte commitids.  Same as in git-log(1), which see.

=item --adog

Short for "--all --decorate --oneline --graph", or the "a dog" mnemonic.

=item --all

Pretty much show commits for all branches, not just the current one.
Same as in git-log(1), which see.

=item --ascii

Generates ASCII art instead of using Unicode line drawing characters.

=item --author-date-order

Show commits in author timestamp order, but show no parent before its
children.  Same as in git-log(1), which see.

=item --color[=<when>]

=item --date-order

=item --decorate[=<short|full|auto|no>]

=item -n, --dry-run

Print the "git log" command that "git graph2" would execute, but do
not run it.  Same as in git-log(1), which see.

=item --exclude=<glob-pattern>

Do not include refs matching the specified glob pattern.  Same as in
git-log(1), which see.

=item --graph

Takes no effect.

=item -h, --help

Display a help message and exit immediately.

=item --name-status

Show the names and statuses of changed files.  Same as in git-log(1),
which see.

=item --oneline|--one-line

Print a one-line summary of each commit.  Same as in git-log(1), which
see.

=item --parents, --show-parents

Also show the parents of each commit.  This is pretty much the same as
in git-log(1), but since "git graph2" must run "git log --parents",
this option is handled by "git graph2", not "git log".

=item --pretty[=<format>]

Pretty-print the contents of the commit logs in the given format.
Same as in git-log(1), which see.

When specifying a custom format ("--pretty=format:..."), the format
specification must start with '%h %p ' or '%H %P ' in order for
git-graph2 to continue to work properly.

=item --topo-order

Show no parents before their children, and avoid intermixing multiple
lines of history.  Same as in git-log(1), which see.

=item -v, --verbose

Increase output level.

=back

=head1 AUTHOR

Darren Embry (dse@webonastick.com)
