#!/usr/bin/env bash
set -o errexit
set -o pipefail

progname="$(basename "$0")"
dirname="$(dirname "$0")"

RUN () {
    >&2 echo "+ ${@@Q}"
    if (( dry_run )) ; then
        return
    fi
    "$@"
}

FAIL () {
    if [[ -n "${source}" ]] ; then
        current="$(git rev-parse --abbrev-ref HEAD)"
        if [[ "${source}" != "" ]] && [[ "${current}" != "${source}" ]] ; then
            >&2 echo
            >&2 echo "    YOU ARE STILL IN BRANCH ${current}."
        else
            true
        fi
    fi
    exit 1
}

main () {
    if (( $# < 1 )) ; then
        >&2 echo "usage: git merge-into <dest-branch>"
        exit 1
    fi

    if git status --no-ahead-behind --short | grep . >/dev/null 2>/dev/null ; then
        >&2 echo
        >&2 echo "*** You have uncommitted, unstaged, and/or untracked changes/files."
        >&2 echo "    Please remedy this before running 'git merge-into'."
        >&2 echo "    Use 'git stash -u' to include untracked files when stashing."
        FAIL
    fi

    local dest source

    local opt_no_ff=''

    while getopts 'h-:' OPTION ; do
        if [[ "${OPTION}" = "-" ]] ; then
            if [[ "${OPTARG}" == "" ]] ; then
                # argument is '--' by itself; terminate option parsing
                break
            fi
            OPTION="${OPTARG}"
            unset OPTARG
            case "${OPTION}" in
                *=*)
                    OPTARG="${OPTION#*=}"
                    OPTION="${OPTION%%=*}"
                    ;;
            esac
        fi
        case "${OPTION}" in
            h|help)
                usage
                exit 0
                ;;
            no-ff)
                opt_no_ff='--no-ff'
                ;;
            '?')
                # short option invalid or missing argument
                >&2 echo "Type '<progname> --help' for more information."
                exit 1
                ;;
            *)
                # invalid long option
                >&2 echo "<progname>: unknown option -- ${OPTION}"
                >&2 echo "Type '<progname> --help' for more information."
                exit 1
                ;;
        esac
    done
    shift $(( OPTIND - 1 ))

    dest="$1"
    source="$(git rev-parse --abbrev-ref HEAD)"

    if ! RUN git checkout "${dest}" ; then
        >&2 echo
        >&2 echo "*** \`git checkout ${dest}\` failed."
        FAIL
    fi

    if ! RUN git pull ; then
        >&2 echo
        >&2 echo "*** \`git pull\` into ${dest} failed."
        FAIL
    fi

    if ! RUN git merge $opt_no_ff --no-edit "${source}" ; then
        >&2 echo
        >&2 echo "*** \`git merge $opt_no_ff --no-edit ${source}\` into ${dest} failed."
        FAIL
    fi

    if ! RUN git push ; then
        >&2 echo
        >&2 echo "*** checkout and merge successful, but \`git push\` from ${dest} failed."
        FAIL
    fi

    if ! RUN git checkout "${source}" ; then
        >&2 echo
        >&2 echo "*** checkout, merge, and push successful, but \`git checkout ${source}\` failed."
        FAIL
    fi

    >&2 echo
    >&2 echo "*** ALL DONE.  :-)"
}

###############################################################################

main "$@"
