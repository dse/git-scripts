#!/usr/bin/env bash
set -o errexit
set -o pipefail

progname="$(basename "$0")"
dirname="$(dirname "$0")"

RUN () {
    >&2 echo "+ ${@@Q}"
    if (( dry_run )) ; then
        return
    fi
    "$@"
}

FAIL () {
    if [[ -n "${source}" ]] ; then
        current="$(git rev-parse --abbrev-ref HEAD)"
        if [[ "${source}" != "" ]] && [[ "${current}" != "${source}" ]] ; then
            >&2 echo
            >&2 echo "    YOU ARE STILL IN BRANCH ${current}."
        else
            true
        fi
    fi
}

main () {
    if (( $# < 1 )) ; then
        >&2 echo "usage: git merge-into <dest-branch>"
        exit 1
    fi

    if git status --no-ahead-behind --short | grep . >/dev/null 2>/dev/null ; then {
        >&2 echo
        >&2 echo "*** You have uncommitted, unstaged, and/or untracked changes/files."
        >&2 echo "    Please remedy this before running 'git merge-into'."
        >&2 echo "    Use 'git stash -u' to include untracked files when stashing."
        FAIL
    } ; fi

    local dest source

    dest="$1"
    source="$(git rev-parse --abbrev-ref HEAD)"

    RUN git checkout "${dest}" || {
        >&2 echo
        >&2 echo "*** \`git checkout ${dest}\` failed."
        FAIL
    }

    RUN git pull || {
        >&2 echo
        >&2 echo "*** \`git pull\` into ${dest} failed."
        FAIL
    }

    RUN git merge --no-edit "${source}" || {
        >&2 echo
        >&2 echo "*** \`git merge --no-edit ${source}\` into ${dest} failed."
        FAIL
    }

    RUN git push || {
        >&2 echo
        >&2 echo "*** checkout and merge successful, but \`git push\` from ${dest} failed."
        FAIL
    }

    RUN git checkout "${source}" || {
        >&2 echo
        >&2 echo "*** checkout, merge, and push successful, but \`git checkout ${source}\` failed."
        FAIL
    }

    >&2 echo
    >&2 echo "*** ALL DONE.  :-)"
}

###############################################################################

main "$@"
