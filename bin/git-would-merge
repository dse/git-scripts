#!/usr/bin/env bash
#
# git-would-merge --- utility to output contents of the base branch,
# our branch, and their branch, in preparation for a merge.
#
set -o errexit
set -o nounset
set -o pipefail
shopt -s lastpipe               # for ... | {readarray|mapfile} -t <arrayname>
#set -o xtrace

# .NAME
#     git-would-merge
# .DESCRIPTION
#     Quick and dirty utility for when there are merge conflicts.
#
#     Run this program in a git repository.
#
#     Where there are merge conflicts, it produces the following
#     files:
#
#     -   versions of the files in question at the merge base, in our
#         branch, and in the source branch (THEIRS):
#
#         -   <filename>--BASE.<ext>
#         -   <filename>--OURS.<ext>
#         -   <filename>--THEIRS.<ext>
#
#     -   diffs between the merge base and the target branch, and
#         between the merge base and the source branch:
#
#         -   <filename>--BASE--OURS.<ext>.diff
#         -   <filename>--BASE--THEIRS.<ext>.diff
#
#     -   and a `git log` list of commits from the merge base to either
#         the target branch (OURS) or source branch (THEIRS):
#
#         -   <filename>--BASE--OURS.<ext>.log
#         -   <filename>--BASE--THEIRS.<ext>.log
#
#     A good rule of thumb is the following:
#
#     -   Take the **larger** of the two .diff files, and copy its
#         respective version (<filename>--OURS.<ext> or
#         <filename>--THEIRS.<ext>) to the file name in conflict.
#
#     -   Take the **smaller** of the two .diff files, and apply it
#         as a patch, either manually or using `patch`.
#
# .EXAMPLE 1
#
# Let's say after running `git-would-merge` you have the following
# files now:
#
#     -rw-r--r-- 1 dse dse 2952 Oct  4 12:41 awsLambda.js
#     -rw-r--r-- 1 dse dse 2952 Oct  4 12:44 awsLambda--BASE.js
#     -rw-r--r-- 1 dse dse 1227 Oct  4 12:44 awsLambda--BASE--OURS.js.diff
#     -rw-r--r-- 1 dse dse 1997 Oct  4 12:44 awsLambda--BASE--THEIRS.js.diff
#     -rw-r--r-- 1 dse dse 3191 Oct  4 12:44 awsLambda--OURS.js
#     -rw-r--r-- 1 dse dse 2222 Oct  4 12:44 awsLambda--OURS.js.log
#     -rw-r--r-- 1 dse dse 2459 Oct  4 12:44 awsLambda--THEIRS.js
#     -rw-r--r-- 1 dse dse 3273 Oct  4 12:44 awsLambda--THEIRS.js.log
#
# Because the smaller of the two diffs is between BASE and OURS,
# you probably want to take the following steps:
#
# -   `cp awsLambda--THEIRS.js awsLambda.js`
#
# -   `patch -p1 awsLambda--BASE--OURS.js.diff`
#     or do the same manually

main () {
    # top level project directory
    local root="$(git rev-parse --show-toplevel)"

    local -a diff_options=()

    while (( $# )) && [[ "$1" = -* ]] ; do
        diff_options+=("$1")
        shift
    done

    if (( $# )) && [[ "$1" == "clean" ]] ; then
        clean
        exit 0
    fi

    if [[ ! -e "${root}/.git/ORIG_HEAD" ]] ; then
        >&2 echo "not merging"
        exit 1
    fi

    local isMerging=0
    [[ -e "${root}/.git/MERGE_HEAD" ]] && isMerging=1

    if (( !isMerging )) ; then
        >&2 echo "git-would-merge: not merging."
        exit 1
    fi

    local origHead="$(cat "${root}/.git/ORIG_HEAD")"
    local mergeHead="$(cat "${root}/.git/MERGE_HEAD")"
    local mergeBase="$(git merge-base "${origHead}" "${mergeHead}")"

    # make sure the files we created are ignored by git
    local excludeFile="${root}/.git/info/exclude"
    grep -F -x '*--BASE*'   "${excludeFile}" >/dev/null 2>/dev/null || echo '*--BASE*'   >>"${excludeFile}"
    grep -F -x '*--OURS*'   "${excludeFile}" >/dev/null 2>/dev/null || echo '*--OURS*'   >>"${excludeFile}"
    grep -F -x '*--THEIRS*' "${excludeFile}" >/dev/null 2>/dev/null || echo '*--THEIRS*' >>"${excludeFile}"
    grep -F -x '*.tmp'      "${excludeFile}" >/dev/null 2>/dev/null || echo '*.tmp'      >>"${excludeFile}"

    local filename=""
    local -a filenames=()
    if (( $# )) ; then
        for filename in "${@}" ; do
            would-merge "${filename}"
        done
    else
        git diff --name-only --diff-filter=U | mapfile -t filenames
        if (( ! ${#filenames[@]} )) ; then
            >&2 echo "no files with conflicts."
            exit 0
        fi
        for filename in "${filenames[@]}" ; do
            would-merge "${filename}"
        done
    fi
}

would-merge () {
    for filename in "${@}" ; do
        dirname="$(dirname "${filename}")"
        basename="$(basename "${filename}")"
        case "${basename}" in
            .*.*)
                basebasename="${basename%.*}"
                ext=".${basename##*.}"
                ;;
            .*)
                basebasename="${basename}"
                ext=""
                ;;
            *.*)
                basebasename="${basename%.*}"
                ext=".${basename##*.}"
                ;;
            *)
                basebasename="${basename}"
                ext=""
                ;;
        esac

        base="${dirname}/${basebasename}--BASE${ext}"
        ours="${dirname}/${basebasename}--OURS${ext}"
        theirs="${dirname}/${basebasename}--THEIRS${ext}"

        baseOurs="${dirname}/${basebasename}--BASE--OURS${ext}"
        baseTheirs="${dirname}/${basebasename}--BASE--THEIRS${ext}"

        ( rm "${ours}" || true
          rm "${theirs}" || true
          rm "${base}" || true
          rm "${baseOurs}.diff" || true
          rm "${baseTheirs}.diff" || true
          rm "${baseOurs}.w.diff" || true
          rm "${baseTheirs}.w.diff" || true ) >/dev/null 2>/dev/null

        case "${filename}" in
            ./*)     gitfilename="${filename}"   ;;
            ../*)    gitfilename="${filename}"   ;;
            /*)      gitfilename="${filename}"   ;;
            *)       gitfilename="./${filename}" ;;
        esac

        # :0: => stage 0 entry
        # :1: => common ancestor
        # :2: => our branch   a/k/a target branch
        # :3: => their branch a/k/a branch from which we're merging

        # nested conflicts?
        # git show ":2:${gitfilename}" >"${ours}.tmp"
        # git show ":3:${gitfilename}" >"${theirs}.tmp"
        # git show ":1:${gitfilename}" >"${base}.tmp"

        # shitload o' diffs?

        >&2 echo "orighead"
        if git show "${origHead}:${gitfilename}" >"${ours}.tmp"  ; then
            mv "${ours}.tmp"   "${ours}"
        else
            rm "${ours}.tmp"
        fi

        >&2 echo "mergehead"
        if git show "${mergeHead}:${gitfilename}" >"${theirs}.tmp" ; then
            mv "${theirs}.tmp" "${theirs}"
        else
            rm "${theirs}.tmp"
        fi

        >&2 echo "mergebase"
        if git show "${mergeBase}:${gitfilename}" >"${base}.tmp" ; then
            mv "${base}.tmp"   "${base}"
        else
            rm "${base}.tmp"
        fi

        local -a diff=(
            # diff -u --strip-trailing-cr -B -b -w
            git diff --no-index --ignore-cr-at-eol --ignore-blank-lines -b -w --color=always "${diff_options[@]}"
        )

        if [[ -e "${ours}" ]] ; then
            set -x
            "${diff[@]}" "${base}" "${ours}"               >"${baseOurs}.diff" || true
            "${diff[@]}" "${base}" "${ours}"   --word-diff >"${baseOurs}.w.diff" || true
            set +x
        fi
        if [[ -e "${theirs}" ]] ; then
            set -x
            "${diff[@]}" "${base}" "${theirs}"             >"${baseTheirs}.diff" || true
            "${diff[@]}" "${base}" "${theirs}" --word-diff >"${baseTheirs}.w.diff" || true
            set +x
        fi

        git log --patch --ignore-cr-at-eol --ignore-blank-lines -b -w "${mergeHead}..${origHead}" -- "${gitfilename}" >"${ours}.log"
        git log --patch --ignore-cr-at-eol --ignore-blank-lines -b -w "${origHead}..${mergeHead}" -- "${gitfilename}" >"${theirs}.log"

        echo "${filename}"
        echo "    orig head is $origHead"
        echo "    merge head is $mergeHead"
        echo "    merge base is $mergeBase"
        echo "    Wrote the following files:"

        local -a files=(
            "${base}"
            "${ours}"
            "${theirs}"
            "${ours}.log"
            "${theirs}.log"
            "${baseOurs}.diff"
            "${baseTheirs}.diff"
            "${baseOurs}.w.diff"
            "${baseTheirs}.w.diff"
        )

        ( /bin/ls -l -d "${files[@]}" 2>/dev/null | sed 's/^/    /' ) || true

        local noConflicts=1

        local i
        for i in "${ours}" "${theirs}" "${base}" ; do
            if grep -e '^<<<<<<< ' -e '^======= ' -e '^>>>>>>> ' -e '^<<<<<<<<< ' -e '^========= ' -e '^>>>>>>>>> ' "${ours}" >/dev/null 2>/dev/null ; then
                noConflicts=0
                echo "    :-( ${i} itself appears to contain merge conflicts."
            fi
        done

        if (( noConflicts )) ; then
            echo "    :-) No merge conflicts in any of the files being merged."
        fi
    done
}

clean () {
    find "${root}" \
         \! \( -type d -name .git -prune \) \
         \! \( -type d -name node_modules -prune \) \
         -type f \( \
         -name '*--OURS*' -o \
         -name '*--THEIRS*' -o \
         -name '*--BASE*' \) -exec rm -v {} +
}

at_exit () {
    [[ -n "${ours}"   ]] && [[ -e "${ours}.tmp"   ]] && { rm "${ours}.tmp"   >/dev/null 2>/dev/null || true; }
    [[ -n "${theirs}" ]] && [[ -e "${theirs}.tmp" ]] && { rm "${theirs}.tmp" >/dev/null 2>/dev/null || true; }
    [[ -n "${base}"   ]] && [[ -e "${base}.tmp"   ]] && { rm "${base}.tmp"   >/dev/null 2>/dev/null || true; }
}

###############################################################################
main "$@"
