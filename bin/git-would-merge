#!/usr/bin/env bash
#
# git-would-merge --- utility to output contents of the base branch,
# our branch, and their branch, in preparation for a merge.
#
set -o errexit
set -o nounset
set -o pipefail
shopt -s lastpipe               # for ... | {readarray|mapfile} -t <arrayname>
#set -o xtrace

# .NAME
#     git-would-merge
# .DESCRIPTION
#     Quick and dirty utility for when there are merge conflicts.
#
#     Run this program in a git repository.
#
#     Where there are merge conflicts, it produces the following
#     files:
#
#     -   versions of the files in question at the merge base, in our
#         branch, and in the source branch (THEIRS):
#
#         -   <filename>.GWM.BASE.<ext>
#         -   <filename>.GWM.OURS.<ext>
#         -   <filename>.GWM.THEIRS.<ext>
#
#     -   diffs between the merge base and the target branch, and
#         between the merge base and the source branch:
#
#         -   <filename>.GWM.BASE--OURS.<ext>.diff
#         -   <filename>.GWM.BASE--THEIRS.<ext>.diff
#
#     -   and a `git log` list of commits from the merge base to either
#         the target branch (OURS) or source branch (THEIRS):
#
#         -   <filename>.GWM.BASE--OURS.<ext>.log
#         -   <filename>.GWM.BASE--THEIRS.<ext>.log
#
#     A good rule of thumb is the following:
#
#     -   Take the **larger** of the two .diff files, and copy its
#         respective version (<filename>.GWM.OURS.<ext> or
#         <filename>.GWM.THEIRS.<ext>) to the file name in conflict.
#
#     -   Take the **smaller** of the two .diff files, and apply it
#         as a patch, either manually or using `patch`.
#
# .EXAMPLE 1
#
# Let's say after running `git-would-merge` you have the following
# files now:
#
#     -rw-r--r-- 1 dse dse 2952 Oct  4 12:41 awsLambda.js
#     -rw-r--r-- 1 dse dse 2952 Oct  4 12:44 awsLambda.GWM.BASE.js
#     -rw-r--r-- 1 dse dse 1227 Oct  4 12:44 awsLambda.GWM.BASE--OURS.js.diff
#     -rw-r--r-- 1 dse dse 1997 Oct  4 12:44 awsLambda.GWM.BASE--THEIRS.js.diff
#     -rw-r--r-- 1 dse dse 3191 Oct  4 12:44 awsLambda.GWM.OURS.js
#     -rw-r--r-- 1 dse dse 2222 Oct  4 12:44 awsLambda.GWM.OURS.js.log
#     -rw-r--r-- 1 dse dse 2459 Oct  4 12:44 awsLambda.GWM.THEIRS.js
#     -rw-r--r-- 1 dse dse 3273 Oct  4 12:44 awsLambda.GWM.THEIRS.js.log
#
# Because the smaller of the two diffs is between BASE and OURS,
# you probably want to take the following steps:
#
# -   `cp awsLambda.GWM.THEIRS.js awsLambda.js`
#
# -   `patch -p1 awsLambda.GWM.BASE--OURS.js.diff`
#     or do the same manually

main () {
    # top level project directory
    local root="$(git rev-parse --show-toplevel)"

    local -a diff_options=()

    while (( $# )) && [[ "$1" = -* ]] ; do
        diff_options+=("$1")
        shift
    done

    if (( $# )) && [[ "$1" == "help" ]] ; then
        echo "usage:"
        echo "    git-would-merge help"
        echo "    git-would-merge clean"
        echo "    git-would-merge"
    fi

    if (( $# )) && [[ "$1" == "clean" ]] ; then
        clean
        exit 0
    fi

    if [[ ! -e "${root}/.git/ORIG_HEAD" ]] ; then
        >&2 echo "not merging"
        exit 1
    fi

    local isMerging=0
    [[ -e "${root}/.git/MERGE_HEAD" ]] && isMerging=1

    if (( !isMerging )) ; then
        >&2 echo "git-would-merge: not merging."
        exit 1
    fi

    local origHead="$(cat "${root}/.git/ORIG_HEAD")"
    local mergeHead="$(cat "${root}/.git/MERGE_HEAD")"
    local mergeBase="$(git merge-base "${origHead}" "${mergeHead}")"

    # make sure the files we created are ignored by git
    local excludeFile="${root}/.git/info/exclude"
    grep -F -x '*--BASE*'   "${excludeFile}" >/dev/null 2>/dev/null || echo '*--BASE*'   >>"${excludeFile}"
    grep -F -x '*--OURS*'   "${excludeFile}" >/dev/null 2>/dev/null || echo '*--OURS*'   >>"${excludeFile}"
    grep -F -x '*--THEIRS*' "${excludeFile}" >/dev/null 2>/dev/null || echo '*--THEIRS*' >>"${excludeFile}"
    grep -F -x '*.tmp'      "${excludeFile}" >/dev/null 2>/dev/null || echo '*.tmp'      >>"${excludeFile}"
    grep -F -x '*.GWM.*'    "${excludeFile}" >/dev/null 2>/dev/null || echo '*.GWM.*'    >>"${excludeFile}"

    local filename=""
    local -a filenames=()
    if (( $# )) ; then
        for filename in "${@}" ; do
            would-merge "${filename}"
        done
    else
        git diff --name-only --diff-filter=U | mapfile -t filenames
        if (( ! ${#filenames[@]} )) ; then
            >&2 echo "no files with conflicts."
            exit 0
        fi
        for filename in "${filenames[@]}" ; do
            would-merge "${filename}"
        done
    fi
}

would-merge () {
    for filename in "${@}" ; do
        dirname="$(dirname "${filename}")"
        basename="$(basename "${filename}")"
        case "${basename}" in
            .*.*)                             # '.foo.bar'
                basebasename="${basename%.*}" # '.foo'
                ext=".${basename##*.}"        # .bar'
                ;;
            .*)                            # '.foo'
                basebasename="${basename}" # '.foo'
                ext=""                     # ''
                ;;
            *.*)                              # 'foo.bar'
                basebasename="${basename%.*}" # 'foo'
                ext=".${basename##*.}"        # '.bar'
                ;;
            *)                             # 'foo'
                basebasename="${basename}" # 'foo'
                ext=""                     # ''
                ;;
        esac

        base="${dirname}/${basebasename}.GWM.BASE${ext}"
        ours="${dirname}/${basebasename}.GWM.OURS${ext}"
        theirs="${dirname}/${basebasename}.GWM.THEIRS${ext}"
        base2="${dirname}/${basebasename}.GWM.BASE.2${ext}"
        ours2="${dirname}/${basebasename}.GWM.OURS.2${ext}"
        theirs2="${dirname}/${basebasename}.GWM.THEIRS.2${ext}"
        fromBaseToOurs="${dirname}/${basebasename}.GWM.BASE--OURS${ext}"
        fromBaseToTheirs="${dirname}/${basebasename}.GWM.BASE--THEIRS${ext}"

        ( rm "${ours}" || true
          rm "${theirs}" || true
          rm "${base}" || true
          rm "${fromBaseToOurs}.diff" || true
          rm "${fromBaseToTheirs}.diff" || true
          rm "${fromBaseToOurs}.w.diff" || true
          rm "${fromBaseToTheirs}.w.diff" || true ) >/dev/null 2>/dev/null

        case "${filename}" in
            ./*)     gitfilename="${filename}"   ;;
            ../*)    gitfilename="${filename}"   ;;
            /*)      gitfilename="${filename}"   ;;
            *)       gitfilename="./${filename}" ;;
        esac

        local -a files

        git show ":1:${gitfilename}" >"${base}"
        git show ":2:${gitfilename}" >"${ours}"
        git show ":3:${gitfilename}" >"${theirs}"

        files+=(
            "${base}"
            "${ours}"
            "${theirs}"
        )

        git show "${mergeBase}:${gitfilename}" >"${base2}"
        git show "${origHead}:${gitfilename}"  >"${ours2}"
        git show "${mergeHead}:${gitfilename}" >"${theirs2}"

        if diff "${base}"   "${base2}"   ; then rm "${base2}"   ; else >&2 echo "WARNING: :1: and merge base ${mergeBase} differ" ; files+=("${base2}")   ; fi
        if diff "${ours}"   "${ours2}"   ; then rm "${ours2}"   ; else >&2 echo "WARNING: :2: and ours ${ours} differ"            ; files+=("${ours2}")   ; fi
        if diff "${theirs}" "${theirs2}" ; then rm "${theirs2}" ; else >&2 echo "WARNING: :2: and ours ${theirs} differ"          ; files+=("${theirs2}") ; fi

        local -a diff=(
            # diff -u --strip-trailing-cr -B -b -w
            git diff --no-index --ignore-cr-at-eol --ignore-blank-lines -b -w --color=never "${diff_options[@]}"
        )

        "${diff[@]}"                "${base}" "${ours}"               >"${fromBaseToOurs}.diff" || true
        "${diff[@]}"                "${base}" "${ours}"   --word-diff >"${fromBaseToOurs}.w.diff" || true
        "${diff[@]}"                "${base}" "${theirs}"             >"${fromBaseToTheirs}.diff" || true
        "${diff[@]}"                "${base}" "${theirs}" --word-diff >"${fromBaseToTheirs}.w.diff" || true

        "${diff[@]}" --color=always "${base}" "${ours}"               >"${fromBaseToOurs}.c.diff" || true
        "${diff[@]}" --color=always "${base}" "${ours}"   --word-diff >"${fromBaseToOurs}.w.c.diff" || true
        "${diff[@]}" --color=always "${base}" "${theirs}"             >"${fromBaseToTheirs}.c.diff" || true
        "${diff[@]}" --color=always "${base}" "${theirs}" --word-diff >"${fromBaseToTheirs}.w.c.diff" || true

        files+=(
            "${fromBaseToOurs}.diff"
            "${fromBaseToOurs}.w.diff"
            "${fromBaseToTheirs}.diff"
            "${fromBaseToTheirs}.w.diff"
            "${fromBaseToOurs}.c.diff"
            "${fromBaseToOurs}.w.c.diff"
            "${fromBaseToTheirs}.c.diff"
            "${fromBaseToTheirs}.w.c.diff"
        )

        git log --patch --ignore-cr-at-eol --ignore-blank-lines -b -w "${mergeHead}..${origHead}" -- "${gitfilename}" >"${ours}.log"
        git log --patch --ignore-cr-at-eol --ignore-blank-lines -b -w "${origHead}..${mergeHead}" -- "${gitfilename}" >"${theirs}.log"

        files+=(
            "${ours}.log"
            "${theirs}.log"
        )

        echo "${filename}"
        echo "    base is ${mergeBase}; ours is ${origHead}; source branch is ${mergeHead}"
        echo "    Wrote the following files:"

        ( /bin/ls -l -d "${files[@]}" 2>/dev/null | sed 's/^/    /' ) || true

        local noConflicts=1

        local i
        for i in "${ours}" "${theirs}" "${base}" ; do
            if grep -e '^<<<<<<< ' -e '^======= ' -e '^>>>>>>> ' -e '^<<<<<<<<< ' -e '^========= ' -e '^>>>>>>>>> ' "${ours}" >/dev/null 2>/dev/null ; then
                noConflicts=0
                echo "    :-( ${i} itself appears to contain merge conflicts."
            fi
        done

        if (( noConflicts )) ; then
            echo "    :-) No merge conflicts in any of the files being merged."
        fi
    done
}

clean () {
    find "${root}" \
         \! \( -type d -name .git -prune \) \
         \! \( -type d -name node_modules -prune \) \
         -type f \( \
         -name '*.GWM.*' -o \
         -name '*--OURS*' -o \
         -name '*--THEIRS*' -o \
         -name '*--BASE*' \) -exec rm -v {} +
}

at_exit () {
    [[ -n "${ours}"   ]] && [[ -e "${ours}.tmp"   ]] && { rm "${ours}.tmp"   >/dev/null 2>/dev/null || true; }
    [[ -n "${theirs}" ]] && [[ -e "${theirs}.tmp" ]] && { rm "${theirs}.tmp" >/dev/null 2>/dev/null || true; }
    [[ -n "${base}"   ]] && [[ -e "${base}.tmp"   ]] && { rm "${base}.tmp"   >/dev/null 2>/dev/null || true; }
}

###############################################################################
main "$@"
