#!/usr/bin/env bash
set -o errexit
set -o pipefail

# There are fifty million tutorials about migrating Subversion
# projects to Git.
#
# - <https://git-scm.com/book/en/v2/Git-and-Other-Systems-Migrating-to-Git>
# 
#   This is where I got most of the material here.
# 
# - <https://www.atlassian.com/git/tutorials/migrating-prepare>
# 
#   This one sucks because it requires a .jar.
# 
# - <https://john.albin.net/git/convert-subversion-to-git>
# 
#   This one added a step about converting svn:ignore properties.
#   I also got the bits about the authors file from here.

progname="$(basename "$0")"
dirname="$(dirname "$0")"

. "${dirname}/../share/bash-getlongopts/getlongopts.sh"
. "${dirname}/../share/git-scripts/git-scripts.sh"

main () {
    if (( $# < 2 )) ; then
        >&2 echo "${progname}: not enough arguments."
        >&2 echo "Type '$0 --help' for help."
        exit 1
    fi

    local svnurl="$1"; shift
    local projectname="$1"; shift
    local -a clone_cmd
    local -a no_edit_authors_cmd

    case "${step}" in
        "")
            initialize
            edit-authors-file
            clone-repository
            convert-ignores
            fix-tags
            fix-branches
            remove-pegs
            final-setup
            ;;
        initialize|edit-authors-file|clone-repository|convert-ignores|fix-tags|fix-branches|remove-pegs|final-setup)
            "${step}"
            ;;
        *)
            >&2 echo "${progname}: Invalid step: ${step}"
            >&2 echo "Exiting."
            exit 1
            ;;
    esac
}

usage () { cat <<EOF; }
usage:
  ${progname} [<option> ...] <svn-url> <projectname>
options:
      --help
      --dry-run (does nothing)
      --verbose (does nothing)
      --[no-]stdlayout
      --no-edit-authors-file
  -x, --xtrace
steps:
      --step=initialize
      --step=edit-authors-file
      --step=clone-repository
      --step=convert-ignores
      --step=fix-tags
      --step=fix-branches
      --step=remove-pegs
      --step=final-setup
EOF

initialize () {
    if [[ -z "${authors_file}" ]] ; then
        authors_file="${projectname}-authors.txt"
    fi

    clone_cmd=(
        git svn clone
        "${svnurl}"
        --authors-file="${authors_file}"
        --no-metadata
        --prefix ""
    )
    if (( $stdlayout )) ; then
        clone_cmd+=(
            --stdlayout
        )
    else true ; fi
    clone_cmd+=(
        "${projectname}.tmp"
    )

    no_edit_authors_cmd=(
        "${progname}"
        --no-edit-authors-file
    )
    if (( $stdlayout )) ; then
        no_edit_authors_cmd+=(
            --stdlayout
        )
    else true ; fi
    no_edit_authors_cmd+=(
        "${svnurl}"
        "${projectname}"
    )
}

edit-authors-file () {
    if (( no_edit_authors )) ; then
        if [[ ! -e "${authors_file}" ]] ; then
            >&2 echo "${authors_file} does not exist."
            >&2 echo "You need to run this program without the --no-edit-authors-file option."
            >&2 echo "Exiting."
            exit 1
        else
            return 0
        fi
    else true ; fi
    if [[ -e "${authors_file}" ]] ; then
        >&2 echo "${authors_file} already exists."
        >&2 echo "You may wish to inspect it."
        >&2 echo "If it's good, run this program again via the following command:"
        >&2 echo ""
        >&2 echo "    ${no_edit_authors_cmd[@]}"
        >&2 echo ""
        >&2 echo "Exiting."
        exit 1
    else true ; fi
    svn log -q "${svnurl}" | awk -F '|' '/^r/ {sub("^ ", "", $2); sub(" $", "", $2); print $2" = "$2" <"$2">"}' | sort -u > "${authors_file}"
    if [[ -n "${VISUAL}" ]] ; then
        $VISUAL "${authors_file}"
    elif [[ -n "${EDITOR}" ]] ; then
        $EDITOR "${authors_file}"
    elif which nano >/dev/null 2>/dev/null ; then
        nano "${authors_file}"
    elif which pico >/dev/null 2>/dev/null ; then
        pico "${authors_file}"
    else
        >&2 echo "Sorry, I can't find an editor for you."
        >&2 echo "If you can find an editor, use it to edit the file:"
        >&2 echo ""
        >&2 echo "    ${authors_file}"
        >&2 echo ""
        >&2 echo "Then run this program again via the following command:"
        >&2 echo ""
        >&2 echo "    ${no_edit_authors_cmd[@]}"
        >&2 echo ""
        >&2 echo "Exiting."
        exit 0
    fi
    if ! grep . "${authors_file}" >/dev/null 2>/dev/null ; then
        >&2 echo "${authors_file} does not exists or is blank."
        >&2 echo "Aborting."
        exit 1
    else true ; fi
}

clone-repository () {
    if [[ ! -e "${authors_file}" ]] ; then
        >&2 echo "${authors_file} does not exist."
        >&2 echo "Exiting."
        exit 1
    else true ; fi
    if [[ -e "${projectname}" ]] ; then
        >&2 echo "${projectname} already exists."
        >&2 echo "Exiting."
        exit 1
    else true ; fi
    if [[ -e "${projectname}.git" ]] ; then
        >&2 echo "${projectname}.git already exists."
        >&2 echo "Exiting."
        exit 1
    else true ; fi

    rm -frv "${projectname}.tmp"     || true
    rm -frv "${projectname}.tmp.git" || true
    
    "${clone_cmd[@]}"
}

convert-ignores () {
    (
        cd "${projectname}.tmp"
        >&2 echo "Converting svn:ignore properties ..."

        git svn show-ignore > .gitignore || true
        if grep . .gitignore >/dev/null 2>/dev/null ; then
            git add .gitignore
            git commit -m 'Convert svn:ignore properties to .gitignore.'
            return
        else true ; fi

        git svn show-ignore --id=trunk > .gitignore || true
        if grep . .gitignore >/dev/null 2>/dev/null ; then
            git add .gitignore
            git commit -m 'Convert svn:ignore properties to .gitignore.'
            return
        else true ; fi
        
        rm .gitignore || true
    )
}

fix-tags () {
    (
        local b
        cd "${projectname}.tmp"
        >&2 echo "Fixing branches ..."
        for b in $(
                      git for-each-ref --format='%(refname:short)' refs/remotes
                  ); do
            git branch "$b" "refs/remotes/$b"
            git branch -D -r "$b" || true
            git tag --delete "$b" || true
        done
    )
}

fix-branches () {
    (
        local t
        cd "${projectname}.tmp"
        >&2 echo "Fixing tags ..."
        for t in $(
                      git for-each-ref --format='%(refname:short)' refs/remotes/tags
                  ); do
            git tag "${t/tags\//}" "$t"
            git branch -D -r "$t" || true
            git tag --delete "$t" || true
        done
    )
}

remove-pegs () {
    (
        local p
        cd "${projectname}.tmp"
        >&2 echo "Removing peg revisions ..."
        for p in $(
                      git for-each-ref --format='%(refname:short)' | grep @
                  ); do
            git branch -D "$p" || true
            git tag --delete "$p" || true
        done
    )
}

final-setup () {
    mkdir -p "${projectname}.tmp.git"
    local realpath="$(realpath "${projectname}.tmp.git")"
    (
        cd "${projectname}.tmp.git"
        git init --bare
    )
    (
        cd "${projectname}.tmp"
        git remote add initial-origin "${realpath}"
        git push --all initial-origin
    )
    if [[ -e "${projectname}.git" ]] ; then
        >&2 echo "Ugh, somehow ${projectname}.git exists now."
        >&2 echo "Exiting."
        exit 1
    else true ; fi
    mv "${projectname}.tmp.git" "${projectname}.git"
    if [[ -e "${projectname}" ]] ; then
        >&2 echo "Ugh, somehow ${projectname} exists now."
        >&2 echo "Exiting."
        exit 1
    else true ; fi
    mv "${projectname}.tmp" "${projectname}"
    realpath="$(realpath "${projectname}.git")"
    (
        cd "${projectname}"
        git remote set-url initial-origin "${realpath}"
    )
    >&2 echo "Cool.  You have a bare repository in:"
    >&2 echo ""
    >&2 echo "    $(realpath "${projectname}.git")"
    >&2 echo ""
    >&2 echo "And a working copy in:"
    >&2 echo ""
    >&2 echo "    $(realpath "${projectname}")"
    >&2 echo ""
    >&2 echo "Within that working copy you may wish to remove the"
    >&2 echo "'initial-origin' remote I created:"
    >&2 echo ""
    >&2 echo "    git remote remove initial-origin"
    >&2 echo ""
    >&2 echo "All done."
}

no_edit_authors=0
stdlayout=0
step=""
authors_file=""

declare -a longoptions
longoptions=(
    no-edit-authors-file 0
    no-edit-authors 0
    stdlayout 0
    no-stdlayout 0
    help 0
    xtrace 0
    step 1
    authors-file 1
)

check_options () {
    local OPTION
    while getlongopts 'hnvx' OPTION "${longoptions[@]}" -- "$@" ; do
        case "${OPTION}" in
            no-edit-authors-file|no-edit-authors)
                no_edit_authors=1;;
            stdlayout)
                stdlayout=1;;
            no-stdlayout)
                stdlayout=0;;
            x|xtrace)
                set -x;;
            step)
                step="${OPTARG}";;
            authors-file)
                authors_file="${OPTARG}";;
            
            h|help)
                usage; exit 0;;
            n|dry-run)
                dry_run=1;;
            v|verbose)
                verbose=$((verbose + 1));;
            "?")
                exit 1;;
            ??*)                # length >= 2
                >&2 echo "${progname}: invalid option: --${OPTION}"; exit 1;;
            *)                  # length < 2
                >&2 echo "${progname}: invalid option: -${OPTION}"; exit 1;;
        esac
    done
}

###############################################################################

check_options "$@"
shift $((OPTIND - 1))
main "$@"
