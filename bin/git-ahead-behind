#!/usr/bin/env bash
set -o errexit
set -o pipefail
set -o nounset
# set -o xtrace
shopt -s lastpipe

PROGNAME="$(dirname "$0")"      # executed as git-ahead, git-behind, or git-ahead-behind?

verbosity=0

while getopts 'v-:' OPTION ; do
    if [[ "${OPTION}" == "-" ]] ; then
        if [[ "${OPTARG}" == *=* ]] ; then # "option=value"
            OPTION="--${OPTARG%%=*}"       # "--option"
            OPTARG="${OPTARG#*=}"          # "value"
        else                               # "option"
            OPTION="--${OPTARG}"           # "--option"
            unset OPTARG
        fi
    fi
    case "${OPTION}" in
        --verbose|--verbosity|v)
            if [[ -v OPTARG ]] ; then
                >&2 echo "$0: option does not take argument -- ${OPTION#--}"
                exit 1
            fi
            verbosity=$((verbosity+1))
            ;;
        --*)
            >&2 echo "$0: illegal option -- ${OPTION#--}"
            exit 1
            ;;
        *)
            exit 1
            ;;
    esac
done
shift $((OPTIND - 1))

declare -a locals=()            # locals=(master development)
declare -a remotes=()           # remotes=(remotes/origin/master remotes/origin/development)
declare -A has_local=()         # has_local[master]=1
declare -A has_remote=()        # has_remote[master]=1

fmt='%6s  %-32s  %-12s  %s\n'

git --no-pager branch --all --list --no-color --no-column | cut -c3- | grep -v -e '/HEAD -> ' | mapfile -t refs
for ref in "${refs[@]}" ; do
    if [[ "${ref}" = remotes/*/* ]] ; then
        has_remote["${ref#remotes/*/}"]=1
        remotes+=("${ref}")
    else
        has_local["${ref}"]=1
        locals+=("${ref}")
    fi
done
for remote in "${remotes[@]}" ; do
    local="${remote#remotes/*/}"
    if (( ! has_local["${local}"] )) ; then
        # printf "%6s  NOT CHECKED OUT: %s\\n" "-" "${remote}"
        continue
    fi
    git rev-list --left-right --count "${local}"..."${remote}" | read ahead behind
    case "${0##*/}" in
        git-ahead-behind)
            if (( ahead )) ; then
                printf "%6d  AHEAD: %s %s\\n" "${ahead}" "${local}" "${remote}"
            fi
            if (( behind )) ; then
                printf "%6d  BEHIND: %s %s\\n" "${behind}" "${local}" "${remote}"
            fi
            ;;
        git-ahead)
            if (( ahead )) ; then
                printf "%6d  AHEAD: %s %s\\n" "${ahead}" "${local}" "${remote}"
                if (( verbosity && behind )) ; then
                    printf "%6d  BEHIND: %s %s\\n" "${behind}" "${local}" "${remote}"
                fi
            fi
            ;;
        git-behind)
            if (( behind )) ; then
                printf "%6d  BEHIND: %s %s\\n" "${behind}" "${local}" "${remote}"
                if (( verbosity && ahead )) ; then
                    printf "%6d  AHEAD: %s %s\\n" "${ahead}" "${local}" "${remote}"
                fi
            fi
            ;;
    esac
done

case "${0##*/}" in
    git-ahead-behind)
        for local in "${locals[@]}" ; do
            if (( ! has_remote["${local}"] )) ; then
                printf "%6s  NO REMOTES: %s\\n" "-" "${local}"
            fi
        done
        ;;
    git-ahead|git-behind)
        if (( verbosity )) ; then
            for local in "${locals[@]}" ; do
                if (( ! has_remote["${local}"] )) ; then
                    printf "%6s  NO REMOTES: %s\\n" "-" "${local}"
                fi
            done
        fi
        ;;
esac

if [[ "$0" == */git-ahead-behind ]] ; then
    :
fi

# if (( ! $# )) ; then
#     git status --short --branch
# else
#     git status --short --branch "$@"
# fi
