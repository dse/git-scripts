#!/usr/bin/env perl
use warnings;
use strict;
use open qw(:locale);

use File::Find qw(find);
use Cwd qw(getcwd);
use IO::Handle;
use Fcntl;
use Term::ANSIColor;
use IO::Select;
use Scalar::Util qw(refaddr);

our $verbose = 0;
our $noGit;
our $list;
our $inline;
our $noHeader;
our $noPager;
our $minDepth;
our $maxDepth;
our $pipe;
our $progress;
our @gitCommand;
our @exclude;
our $exitCode = 0;
our @failedNames;
our $quiet;
our $width;

our $TTY;
open($TTY, '>', '/dev/tty') or undef $TTY;

main();

sub main {
    use Getopt::Long;
    Getopt::Long::Configure('bundling', 'gnu_compat', 'no_ignore_case', 'no_permute');
    Getopt::Long::GetOptions(
        'x|exclude=s' => \@exclude,
        'G|no-git'    => \$noGit,
        'l|list'      => \$list,
        'v|verbose+'  => \$verbose,
        'i|inline'    => sub { $inline = 1; $quiet = 0; },
        'p|progress'  => \$progress,
        'q|quiet'     => sub { $quiet = 1; $inline = 0; },
        'w|width=i'   => \$width,
        'no-header'   => \$noHeader,
        'no-pager'    => \$noPager,
    ) or die();

    while (scalar @ARGV) {
        my $arg = shift(@ARGV);
        last if ($arg eq '---');
        push(@gitCommand, $arg);
    }
    if (!scalar @gitCommand) {
        $list = 1;
    }

    my @findArguments = @ARGV;
    if (!scalar @findArguments) {
        @findArguments = ('.');
    }

    find(\&wanted, @findArguments);
    if (scalar @failedNames) {
        warn("The following repositories had issues:\n");
        warn("    $_\n") foreach @failedNames;
    }
    exit($exitCode);
}

sub wanted {
    my @lstat = lstat($_);
    return if !scalar(@lstat);
    return unless -d _;
    my $filename = $_;
    return if scalar @exclude && grep { $filename eq $_ } @exclude;
    return $File::Find::prune = 1 if $_ eq 'node_modules';
    if (-d "$_/.git") {
        if ($list) {
            print($File::Find::name, "\n");
        } else {
            doTheFancyThing($_, $File::Find::name);
        }
        return $File::Find::prune = 1;
    }
}

sub doTheThing {
    my ($dir, $name) = @_;
    my $kid = doTheFancyThing($dir, $name);
    if ($kid == -1) {
        return;
    }
    my ($exit, $sig, $dump, $errno, $errid, $errmsg) = exit_status();
    if ($exit || $sig || $dump || $errno) {
        $exitCode = 1;
        push(@failedNames, $name);
    }
}

sub doTheNormalThing {
    my ($dir, $name) = @_;
    print(msg("==> $name <=="), "\n");
    my $pid = fork();
    die("$!") if !defined $pid;
    if (!$pid) {                # child
        chdir($dir) or die("chdir: $!");
        my @cmd = (
            ($noGit ? () : ('git', '--no-pager')),
            @gitCommand,
        );
        exec(@cmd) or die("exec failed: $!");
    }
    return waitpid($pid, 0);
}

use Fcntl qw(F_GETFL F_SETFL O_NONBLOCK);
use constant LINEBUF => 1;

sub doTheFancyThing {
    my ($dir, $name) = @_;
    my $inlinePrefixStdout = $inline ? msg("[$name]", -t 1) . " " : '';
    my $inlinePrefixStderr = $inline ? msg("[$name]", -t 2) . " " : '';
    if ($width && $inline) {
        my $pad = $width - length($name) - 2;
        $pad = $pad > 0 ? ' ' x $pad : '';
        $inlinePrefixStdout .= $pad;
        $inlinePrefixStderr .= $pad;
    }
    if (!$quiet && !$inline) {
        print(msg("==> $name <=="), "\n");
    }
    my ($stdoutRead, $stdoutWrite, $stderrRead, $stderrWrite);
    pipe($stdoutRead, $stdoutWrite) or die("pipe: $!");
    pipe($stderrRead, $stderrWrite) or die("pipe: $!");
    my @cmd = (($noGit ? () : ('git', '--no-pager')), @gitCommand);
    my $pid = fork() // die("fork: $!");
    if (!$pid) {
        # child
        chdir($dir) or die("chdir: $!");
        open(STDOUT, '>&', $stdoutWrite) or die("reopen: $!");
        open(STDERR, '>&', $stderrWrite) or die("reopen: $!");
        binmode($stdoutWrite);  # on account of we're doing sysreads
        binmode($stderrWrite);  # ditto
        exec(@cmd) or die("exec failed: $!");
    }
    binmode($stdoutRead);       # on account of we're doing sysreads
    binmode($stderrRead);       # ditto
    # parent
    close($stderrWrite) or die("close: $!");
    close($stdoutWrite) or die("close: $!");
    my $select = IO::Select->new($stdoutRead, $stderrRead);
    STDOUT->autoflush(1);
    STDERR->autoflush(1);

    # handles need to be non-blocking on account of select tells us which
    # fds are ready to read without blocking.
    {
        my $flags;
        $flags = fcntl($stdoutRead, F_GETFL, 0) or die("fcntl: $!");
        fcntl($stdoutRead, F_SETFL, $flags | O_NONBLOCK) or die("fcntl: $!\n");
        $flags = fcntl($stderrRead, F_GETFL, 0) or die("fcntl: $!");
        fcntl($stderrRead, F_SETFL, $flags | O_NONBLOCK) or die("fcntl: $!\n");
    }

    my $hasStdout;
    my $hasStderr;
    my $buf1 = new My::LineBuf;
    my $buf2 = new My::LineBuf;
    $buf1->{prefix} = $inlinePrefixStdout if $inline;
    $buf2->{prefix} = $inlinePrefixStderr if $inline;

    my $printed = 0;
    do {
        $! = 0;
        my @ready = $select->can_read();
        $hasStdout = grep { refaddr($_) == refaddr($stdoutRead) } @ready;
        $hasStderr = grep { refaddr($_) == refaddr($stderrRead) } @ready;
        while ($hasStdout) {
            my $data;
            my $bytes = sysread($stdoutRead, $data, 4096);
            if (!defined $bytes) {
                last if ($!{EAGAIN}); # there'll be more bytes to read i guess
                my $errid = errid();
                warn("sysread stdout: $errid $!\n");
            }
            if (!$bytes) {
                if (!close($stdoutRead)) {
                    my ($exit, $sig, $dump, $errno) = exit_status();
                    if ($exit || $sig || $dump || $errno) {
                        $exitCode = 1;
                        push(@failedNames, $name);
                    }
                }
                $hasStdout = 0;
                $select->remove($stdoutRead);
                last;
            }
            print(msg("==> $name <<="), "\n") if $quiet && !$printed++;
            print STDOUT $buf1->feed($data);
        }
        while ($hasStderr) {
            my $data;
            my $bytes = sysread($stderrRead, $data, 4096);
            if (!defined $bytes) {
                last if ($!{EAGAIN}); # there'll be more bytes to read i guess
                my $errid = errid();
                warn("sysread stderr: $errid $!\n");
            }
            if (!$bytes) {
                if (!close($stderrRead)) {
                    my ($exit, $sig, $dump, $errno) = exit_status();
                    if ($exit || $sig || $dump || $errno) {
                        $exitCode = 1;
                        push(@failedNames, $name);
                    }
                }
                $hasStderr = 0;
                $select->remove($stderrRead);
                last;
            }
            print(msg("==> $name <<="), "\n") if $quiet && !$printed++;
            print STDERR $buf2->feed($data);
        }
    } while ($hasStdout || $hasStderr);
    print STDOUT $buf1->finish();
    print STDERR $buf2->finish();
    return waitpid($pid, 0);
}

sub msg {
    my ($msg, $tty) = @_;
    $tty //= -t 1;
    return colored(['green'], $msg);
    return $msg;
}

sub errid {
    my ($errid) = grep { $!{$_} } keys %!;
    return $errid;
}

sub exit_status {
    my $exit = $? >> 8;
    my $sig  = $? & 127;
    my $dump = $? & 128;
    my $errno = 0 + $!;
    my $errid = (grep { $!{$_} } keys %!)[0];
    my $errmsg = "$!";
    return ($exit, $sig, $dump, $errno, $errid, $errmsg);
}

package My::LineBuf {
    sub new {
        my ($class, %args) = @_;
        return bless({ %args, data => '' }, $class);
    }
    sub feed {
        my ($self, $data) = @_;
        $self->{data} .= $data;
        my $index = rindex($self->{data}, "\n");
        if ($index == -1) {
            return '';
        }
        if ($index == length($self->{data}) - 1) {
            my $data = $self->{data};
            $self->{data} = '';
            return $self->string($data);
        }
        $data = substr($self->{data}, 0, $index + 1);
        $self->{data} = substr($self->{data}, $index + 1);
        return $self->string($data);
    }
    sub finish {
        my ($self) = @_;
        my $data = $self->{data};
        $self->{data} = '';
        return '' if !length $data;
        $data .= "\n" if substr($data, -1) ne "\n";
        return $self->string($data);
    }
    sub string {
        my ($self, $data) = @_;
        my $prefix = $self->{prefix};
        $data =~ s{^}{$prefix}gm if defined $prefix && $prefix ne '';
        return $data;
    }
}

# select waits until one of the fds is ready for reading or writing
# without blocking.

# use poll or epoll to monitor fds >= FD_SETSIZE.

# select may update the timeout argument; pselect will not.

# pselect has a sigmask argument.
